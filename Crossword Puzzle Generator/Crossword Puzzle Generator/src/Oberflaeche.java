
import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.awt.event.*;
import javax.swing.SwingUtilities;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;
import javax.swing.text.*;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Praktikant55103
 */
public class Oberflaeche extends javax.swing.JFrame {

    Raetsel neuesRaetsel;
    Raetsel raetsel;
    String url;
    JTextField[][] kasten;
    

    public Oberflaeche() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);       //setzt Fenster auf Vollbild
        this.setTitle("Kreuzwortraetsel :-)"); ;
        //this.setResizable(false);
        initComponents();
        raetsel = new Raetsel();
        neuesRaetsel = new Raetsel();
        jPanel2.setLayout(null);


        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogPopUp = new javax.swing.JDialog();
        jTextFieldDurchsuchen = new javax.swing.JTextField();
        jButtonDurchsuchen = new javax.swing.JButton();
        jButtonPopUpErstellen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        listenDropdown = new javax.swing.JPopupMenu();
        loesungAnzeigen = new javax.swing.JMenuItem();
        jumpTo = new javax.swing.JMenuItem();
        jFrameFragen = new javax.swing.JFrame();
        jLabelSenkrecht = new javax.swing.JLabel();
        jLabelWaagerecht = new javax.swing.JLabel();
        jFrameRaetsel = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        jPanelDrucken = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButtonErstellen = new javax.swing.JButton();
        jButtonKomplettloesung = new javax.swing.JButton();
        jButtonEinzelloesung = new javax.swing.JButton();
        jButtonDrucken = new javax.swing.JButton();
        jButtonHilfe = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();

        jDialogPopUp.setTitle("Wähle Textdatei für die Fragen & Antworten aus...");
        jDialogPopUp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogPopUp.setMinimumSize(new java.awt.Dimension(600, 400));
        jDialogPopUp.setResizable(false);

        jTextFieldDurchsuchen.setEditable(false);

        jButtonDurchsuchen.setText("Durchsuchen");
        jButtonDurchsuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDurchsuchenActionPerformed(evt);
            }
        });

        jButtonPopUpErstellen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButtonPopUpErstellen.setText("Rätsel erstellen");
        jButtonPopUpErstellen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonPopUpErstellen.setEnabled(false);
        jButtonPopUpErstellen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPopUpErstellenActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Geben Sie einen Dateipfad an");

        javax.swing.GroupLayout jDialogPopUpLayout = new javax.swing.GroupLayout(jDialogPopUp.getContentPane());
        jDialogPopUp.getContentPane().setLayout(jDialogPopUpLayout);
        jDialogPopUpLayout.setHorizontalGroup(
            jDialogPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPopUpLayout.createSequentialGroup()
                .addGroup(jDialogPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogPopUpLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogPopUpLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jTextFieldDurchsuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButtonDurchsuchen))
                    .addGroup(jDialogPopUpLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jButtonPopUpErstellen, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jDialogPopUpLayout.setVerticalGroup(
            jDialogPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogPopUpLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addGap(69, 69, 69)
                .addGroup(jDialogPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDurchsuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDurchsuchen))
                .addGap(33, 33, 33)
                .addComponent(jButtonPopUpErstellen, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        loesungAnzeigen.setText("Lösung anzeigen");
        loesungAnzeigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loesungAnzeigenMethode(evt);
            }
        });
        listenDropdown.add(loesungAnzeigen);

        jumpTo.setText("Springe zu Kästchen");
        jumpTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpToActionPerformed(evt);
            }
        });
        listenDropdown.add(jumpTo);

        jFrameFragen.setTitle("Druckvorschau Fragen");

        jLabelSenkrecht.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabelSenkrecht.setText("Fragen waagerecht");

        jLabelWaagerecht.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabelWaagerecht.setText("Fragen senkrecht");

        javax.swing.GroupLayout jFrameFragenLayout = new javax.swing.GroupLayout(jFrameFragen.getContentPane());
        jFrameFragen.getContentPane().setLayout(jFrameFragenLayout);
        jFrameFragenLayout.setHorizontalGroup(
            jFrameFragenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameFragenLayout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jLabelSenkrecht, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(jLabelWaagerecht)
                .addGap(179, 179, 179))
        );
        jFrameFragenLayout.setVerticalGroup(
            jFrameFragenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameFragenLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jFrameFragenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSenkrecht, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelWaagerecht))
                .addGap(132, 132, 132))
        );

        jFrameRaetsel.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrameRaetsel.setTitle("Druckvorschau Kreuzworträtsel");
        jFrameRaetsel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Kreuzworträtsel");

        javax.swing.GroupLayout jFrameRaetselLayout = new javax.swing.GroupLayout(jFrameRaetsel.getContentPane());
        jFrameRaetsel.getContentPane().setLayout(jFrameRaetselLayout);
        jFrameRaetselLayout.setHorizontalGroup(
            jFrameRaetselLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameRaetselLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelDrucken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jFrameRaetselLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jLabel3)
                .addContainerGap(635, Short.MAX_VALUE))
        );
        jFrameRaetselLayout.setVerticalGroup(
            jFrameRaetselLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameRaetselLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(512, 512, 512)
                .addComponent(jPanelDrucken, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setMaximumSize(new java.awt.Dimension(200, 500));

        jButtonErstellen.setText("Rätsel erstellen");
        jButtonErstellen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonErstellenActionPerformed(evt);
            }
        });

        jButtonKomplettloesung.setText("Komplettlösung");
        jButtonKomplettloesung.setToolTipText("Bitte erst die Hilfe lesen bzw. ein Rätsel erstellen");
        jButtonKomplettloesung.setEnabled(false);
        jButtonKomplettloesung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                komplettloesungAnzeigen(evt);
            }
        });

        jButtonEinzelloesung.setText("Lösung überprüfen");
        jButtonEinzelloesung.setToolTipText("Bitte erst die Hilfe lesen bzw. ein Rätsel erstellen");
        jButtonEinzelloesung.setEnabled(false);
        jButtonEinzelloesung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEinzelloesungActionPerformed(evt);
            }
        });

        jButtonDrucken.setText("Drucken");
        jButtonDrucken.setToolTipText("Bitte erst die Hilfe lesen bzw. ein Rätsel erstellen");
        jButtonDrucken.setEnabled(false);
        jButtonDrucken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDruckenActionPerformed(evt);
            }
        });

        jButtonHilfe.setText("Hilfe");
        jButtonHilfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHilfeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonEinzelloesung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonErstellen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonKomplettloesung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDrucken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonHilfe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonErstellen)
                .addGap(88, 88, 88)
                .addComponent(jButtonKomplettloesung)
                .addGap(102, 102, 102)
                .addComponent(jButtonEinzelloesung)
                .addGap(95, 95, 95)
                .addComponent(jButtonDrucken)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonHilfe)
                .addGap(78, 78, 78))
        );

        jList1.setMaximumSize(new java.awt.Dimension(10000, 10000));
        jList1.setMinimumSize(new java.awt.Dimension(300, 400));
        jList1.setPreferredSize(null);
        jScrollPane1.setViewportView(jList1);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(35, 329));

        jList2.setToolTipText("");
        jList2.setMaximumSize(new java.awt.Dimension(10000, 10000));
        jList2.setMinimumSize(new java.awt.Dimension(300, 400));
        jList2.setPreferredSize(null);
        jScrollPane2.setViewportView(jList2);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setEnabled(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 708, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonHilfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHilfeActionPerformed
        JOptionPane.showMessageDialog(null, "1. Rätsel vorbereiten: 			Schreiben Sie Ihre Fragen und Antworten abwechselnd zeilenweise in eine .txt-Datei. Zuerst die erste Frage, dann die dazugehörige Antwort usw.\n" +
"		       			Benutzen Sie keine Umlaute in Fragen und Antworten.\n" +
"2. Rätsel erstellen: 			Drücken Sie 'Rätsel erstellen', drücken Sie dann 'Durchsuchen', wählen Ihre .txt-Datei aus und drücken dann 'Rätsel erstellen'.\n" +
"3. Rätsel bearbeiten:			Um das Rätsel zu am PC zu lösen könne Sie einzelene Felder mit der Maus anwählen, im Gitter per Pfeiltasten navigieren, oder einen Rechtsklick auf die zu \n" +
"					beantwortende Frage machen und klicken Sie 'Springe zu Kästchen'. Tippen Sie den Buchstaben, den Sie ins Feld eintragen möchten,\n" +
"					auf der Tastatur und löschen Sie einzelne Buchstaben mit der Backspace-Taste.\n" +
"4. Einzelne Antwort eintragen lassen: 	Um eine einzelne Lösung angezeigt zu bekommen, machen Sie einen Rechtsklick auf die Frage und wählen 'Lösung anzeigen'.\n" +
"5. Komplettlösung:			Um die Komplettlösung einzutragen, klicken Sie den Button 'Komplettlösung'.\n" +
"6. Lösung überprüfen:			Um Ihr fertig ausgefülltes KWR zu überprüfen, drücken Sie den Button 'Lösung überprüfen'. Nicht ausgefüllte Felder gelten als falsch!\n" +
"7. Drucken:				Um zu drucken, drücken Sie den Button 'Drucken', wählen Ihren Drucker aus und drucken in DINA-4 und Querformat.				");
    }//GEN-LAST:event_jButtonHilfeActionPerformed

    private void jButtonDurchsuchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDurchsuchenActionPerformed
             
        url = raetsel.url();                        // Oeffnet die url()-Methode aus der raetsel-Klasse
        jTextFieldDurchsuchen.setText(url);         // setzt den Dateipfad der Textdatei in das Textfeld
        jButtonPopUpErstellen.setEnabled(true);

    }//GEN-LAST:event_jButtonDurchsuchenActionPerformed

    private void jButtonErstellenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonErstellenActionPerformed
        jDialogPopUp.setLocationRelativeTo(null);
        jDialogPopUp.setVisible(true);              //PopUp fuer RaetselErstellung wird sichtbar gemacht
    }//GEN-LAST:event_jButtonErstellenActionPerformed

    private void jButtonPopUpErstellenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPopUpErstellenActionPerformed
        //Button "Rätsel erstellen" erstellt das Raetsel und fügt es dem Hauptfenster hinzu

        jButtonPopUpErstellen.setEnabled(false);       
        jDialogPopUp.setEnabled(true);
        jDialogPopUp.setVisible(true);
        jPanel2.setVisible(true);
        jTextFieldDurchsuchen.setText(null);

                

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        raetsel = raetsel.raetselErstellen(url);  
        DefaultListModel model1 = new DefaultListModel();
        DefaultListModel model2 = new DefaultListModel();
        jButtonErstellen.setEnabled(false);
        jButtonErstellen.setToolTipText("Ein Kreuzworträtsel wurde bereits erstellt.");
        jButtonKomplettloesung.setEnabled(true);     //Buttons werden benutzbar
        jButtonEinzelloesung.setEnabled(true);
        jButtonDrucken.setEnabled(true);
        jButtonKomplettloesung.setToolTipText(null);  //keine Tooltips mehr benötigt
        jButtonEinzelloesung.setToolTipText(null);
        jButtonDrucken.setToolTipText(null);
        

       
        kasten = new JTextField[raetsel.gitter.length][raetsel.gitter.length];
        int kastengroesse = 40;                                             
        while(raetsel.gitter.length*kastengroesse > jPanel2.getWidth()  || raetsel.gitter.length*kastengroesse > jPanel2.getHeight()  ){      //vorher gabs nur getHight - Bedingung
            kastengroesse--;
        }                                                                   
        for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {
                kasten[i][m] = new JTextField();
                kasten[i][m].addKeyListener(new KeyListener() {                 // Felderbedienung mit Pfeiltasten

                    @Override
                    public void keyTyped(KeyEvent e) {
                    }

                    @Override
                    public void keyReleased(KeyEvent e) {
                    }

                    @Override
                    public void keyPressed(KeyEvent e) {
                        if (e.getKeyCode() == KeyEvent.VK_UP) {
                            for (int i = 0; i < raetsel.gitter.length; i++) {
                                for (int j = 0; j < raetsel.gitter.length; j++) {
                                    if (kasten[j][i].isFocusOwner()&&raetsel.gitter[j-1][i] != '?') {
                                        kasten[j - 1][i].requestFocusInWindow();
                                    }
                                }
                            }
                        }
                        if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                            for (int i = 0; i < raetsel.gitter.length; i++) {
                                for (int j = 0; j < raetsel.gitter.length; j++) {
                                    if (kasten[j][i].isFocusOwner() && raetsel.gitter[j+1][i] != '?') {
                                        kasten[j + 1][i].requestFocusInWindow();
                                    }
                                }
                            }
                        }
                        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                            for (int i = 0; i < raetsel.gitter.length; i++) {
                                for (int j = 0; j < raetsel.gitter.length; j++) {
                                    if (kasten[j][i].isFocusOwner() && raetsel.gitter[j][i-1] != '?') {
                                        kasten[j][i - 1].requestFocusInWindow();
                                    }
                                }
                            }
                        }
                        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                            for (int i = 0; i < raetsel.gitter.length; i++) {
                                for (int j = 0; j < raetsel.gitter.length; j++) {
                                    if (kasten[j][i].isFocusOwner() && raetsel.gitter[j][i+1] != '?') {
                                        kasten[j][i + 1].requestFocusInWindow();
                                    }
                                }
                            }
                        }
                    }
                });
            }
        }
        for (int i = 0; i < raetsel.gitter.length; i++) {               //Gitterkaesten werden mit add()-Methode dem Panel hinzugefuegt
            for (int m = 0; m < raetsel.gitter.length; m++) {

                kasten[i][m].setBounds(((jPanel2.getWidth()-kastengroesse*raetsel.gitter.length)/2) + m * kastengroesse, ((jPanel2.getHeight()-kastengroesse*raetsel.gitter.length)/2) + i * kastengroesse, kastengroesse-1, kastengroesse-1); //hier
                kasten[i][m].setHorizontalAlignment(JTextField.CENTER);          // Buchstaben lassen sich mittig im Textfeld schreiben.
                if (raetsel.gitter[i][m] == ' ') {
                    kasten[i][m].setVisible(false);
                    jPanel2.add(kasten[i][m]);
                } else {
                    kasten[i][m].setVisible(true);
                    jPanel2.add(kasten[i][m]);
                    kasten[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black));  //jedes sichtbare KÃ¤stchen erhÃ¤lt eine einfache Umrandung an allen Seiten

                }

            }
        }
        
        TitledBorder title1, title2;
        title1 = BorderFactory.createTitledBorder("Fragen waagerecht");    //Titel für jList1
        title2 = BorderFactory.createTitledBorder("Fragen senkrecht");     //Titel für jList2
        // Fragen werden der Fragenlisten hinzugefuegt
        for (int x = 0; x < raetsel.horizontal.size(); x++) {
            model1.addElement((x) + " " + raetsel.fragen[raetsel.horizontal.get(x)]);
            kasten[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setText(Integer.toString(x));
            kasten[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setEditable(false);
            kasten[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setBackground(Color.black);
            kasten[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setForeground(Color.white);
        }
        jList1.setModel(model1);
        jList1.setBorder(title1);   //jList1 erhält nun den obigen Titel
        
        for (int x = 0; x < raetsel.vertikal.size(); x++) {
            if (raetsel.vertikal.get(x) != -1) {
                model2.addElement((x) + " " + raetsel.fragen[raetsel.vertikal.get(x)]);
                kasten[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setText(Integer.toString(x));
                kasten[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setEditable(false);
                kasten[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setBackground(Color.black);
                kasten[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setForeground(Color.white);
            }

        }
        jList2.setModel(model2);
        jList2.setBorder(title2);

        jScrollPane1.setBounds(0, 0, 300, Oberflaeche.this.getHeight()/2-10);
        jScrollPane2.setBounds(0, Oberflaeche.this.getHeight()/2-10, 300, Oberflaeche.this.getHeight()/2-10);
        //int x = jScrollPane1.getHeight();
//jScrollPane1.setBounds(0, 0, x, Oberflaeche.this.getHeight()/2);
//jScrollPane2.setBounds(0, Oberflaeche.this.getHeight()/2, x, Oberflaeche.this.getHeight()/2-20);

        jList1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int row = jList1.locationToIndex(e.getPoint());
                    jList1.setSelectedIndex(row);
                    listenDropdown.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

        jList2.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    int row = jList2.locationToIndex(e.getPoint());
                    jList2.setSelectedIndex(row);
                    listenDropdown.show(e.getComponent(), e.getX(), e.getY());
                }
            }

        });

        for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {

                if (raetsel.gitter[i][m] != ' ') {

                    AbstractDocument d = (AbstractDocument) kasten[i][m].getDocument();
                    d.setDocumentFilter(new DocumentFilter() {
                        int max = 1;

                        @Override
                        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                            int documentLength = fb.getDocument().getLength();
                            if (documentLength - length + text.length() <= max) {
                                super.replace(fb, offset, length, text.toUpperCase(), attrs);
                            }
                        }
                    });
                }

            }
        }

       /* jDialogPopUp.setVisible(false);
        jFrameRaetsel.setVisible(false);
        jFrameFragen.setVisible(false); */

        /* Der naechste Abschnitt realisiert die Trennzeichen im Kreuzwortraetselgitter, wobei ein Trennzeichen nur am Ende eines Wortes gesetzt wird, falls jede der folgenden Bedingungen erfüllt ist:
         - Das Kästchen des Endbuchstaben des Wortes liegt nicht am Kreuzworträtselrand
         - Das dem Endbuchstaben folgende Kästchen enthält keinen Buchenstaben
         - Das dem Endbuchstaben folgende Kästchen ist kein Zahlenfeld (Am Anfang sind die einzigen Kästchen mit Text Zahlenfelder)
         */
        int[][] TrennzeichenPositionen = new int[raetsel.gitter.length][raetsel.gitter.length]; //Matrix fÃ¼r TrennzeichenPositionen

        for (int i = 0; i < raetsel.antwort.length; i++) {
            if (raetsel.positionen[i][2] == 0 && raetsel.positionen[i][0] + raetsel.antwort[i].length() < raetsel.gitter.length
                    && raetsel.gitter[raetsel.positionen[i][0] + raetsel.antwort[i].length()][raetsel.positionen[i][1]] != ' '
                    && kasten[raetsel.positionen[i][0] + raetsel.antwort[i].length()][raetsel.positionen[i][1]].getText().equals("")) {
                TrennzeichenPositionen[raetsel.positionen[i][0] + raetsel.antwort[i].length() - 1][raetsel.positionen[i][1]] = TrennzeichenPositionen[raetsel.positionen[i][0]
                        + raetsel.antwort[i].length() - 1][raetsel.positionen[i][1]] + 1;
            }
            if (raetsel.positionen[i][2] == 1 && raetsel.positionen[i][1] + raetsel.antwort[i].length() < raetsel.gitter.length
                    && raetsel.gitter[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length()] != ' '
                    && kasten[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length()].getText().equals("")) {
                TrennzeichenPositionen[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length() - 1] = TrennzeichenPositionen[raetsel.positionen[i][0]][raetsel.positionen[i][1]
                        + raetsel.antwort[i].length() - 1] + 2;
            }
        }

        for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {
                if (TrennzeichenPositionen[i][m] == 1) {
                    kasten[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 3, 1, Color.black));
                }
                if (TrennzeichenPositionen[i][m] == 2) {
                    kasten[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 1, 3, Color.black));
                }
                if (TrennzeichenPositionen[i][m] == 3) {
                    kasten[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 3, 3, Color.black));
                }
            }
        }
        

        jDialogPopUp.setVisible(false);
    }//GEN-LAST:event_jButtonPopUpErstellenActionPerformed

    private void komplettloesungAnzeigen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_komplettloesungAnzeigen
        for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {

                if (raetsel.gitter[i][m] != ' ' && raetsel.gitter[i][m] != '?') {
                    kasten[i][m].setText(String.valueOf(raetsel.gitter[i][m])); // Fuegt Buchstaben in Kaestchen ein
                }

            }
        }
    }//GEN-LAST:event_komplettloesungAnzeigen

    private void loesungAnzeigenMethode(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loesungAnzeigenMethode
        JList list = (JList) ((JPopupMenu) ((JMenuItem) evt.getSource()).getAccessibleContext().getAccessibleParent()).getInvoker();
        int x;
        int y;
        if (list.equals(jList1)) {
            x = raetsel.positionen[raetsel.horizontal.get(list.getSelectedIndex())][0];
            y = raetsel.positionen[raetsel.horizontal.get(list.getSelectedIndex())][1];

            for (int i = 1; i < raetsel.antwort[raetsel.horizontal.get(list.getSelectedIndex())].length(); i++) {
                kasten[x][y + i].setText(String.valueOf(raetsel.gitter[x][y + i]));
            }

        } /*
         Bei der vertikalen Liste können wir nicht einfach den Index nehmen, da dann in raetsel.vertikal
         bei diesem Index eventuell ein -1 steht. Wir nehmen also die Nummer, die in dem String vorne steht.
         */ else {
            String indexstring = (String) list.getSelectedValue();
            for (int i = 1; i < indexstring.length(); i++) {
                if (indexstring.charAt(i) == ' ') {
                    indexstring = indexstring.substring(0, i);
                }
            }
            int index = Integer.valueOf(indexstring);
            //System.out.println(index);
            x = raetsel.positionen[raetsel.vertikal.get(index)][0];
            y = raetsel.positionen[raetsel.vertikal.get(index)][1];

            for (int i = 1; i < raetsel.antwort[raetsel.vertikal.get(index)].length(); i++) {
                kasten[x + i][y].setText(String.valueOf(raetsel.gitter[x + i][y]));
            }
        }
    }//GEN-LAST:event_loesungAnzeigenMethode

    private void jumpToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpToActionPerformed
        JList list = (JList) ((JPopupMenu) ((JMenuItem) evt.getSource()).getAccessibleContext().getAccessibleParent()).getInvoker();
        int x;
        int y;
        if (list.equals(jList1)) {
            x = raetsel.positionen[raetsel.horizontal.get(list.getSelectedIndex())][0];
            y = raetsel.positionen[raetsel.horizontal.get(list.getSelectedIndex())][1];

            kasten[x][y + 1].requestFocusInWindow();

        } else {
            String indexstring = (String) list.getSelectedValue();
            for (int i = 1; i < indexstring.length(); i++) {
                if (indexstring.charAt(i) == ' ') {
                    indexstring = indexstring.substring(0, i);
                }
            }
            int index = Integer.valueOf(indexstring);
            //System.out.println(index);
            x = raetsel.positionen[raetsel.vertikal.get(index)][0];
            y = raetsel.positionen[raetsel.vertikal.get(index)][1];

            kasten[x + 1][y].requestFocusInWindow();
        }
    }//GEN-LAST:event_jumpToActionPerformed

    private void jButtonEinzelloesungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEinzelloesungActionPerformed
        boolean flag = true;
        for (int x = 0; x < raetsel.gitter.length; x++) {
            for (int y = 0; y < raetsel.gitter.length; y++) {
                if ((raetsel.gitter[x][y] != ' ' && kasten[x][y].getText().length() != 0 && raetsel.gitter[x][y] != kasten[x][y].getText().charAt(0) && raetsel.gitter[x][y] != '?') || (raetsel.gitter[x][y] != ' ' && kasten[x][y].getText().length() == 0)) {
                    flag = false;
                }
            }
        }
        if (flag) { 
            JOptionPane.showMessageDialog(this, "Alles richtig");
            //flag = true;
        } else {
           
            JOptionPane.showMessageDialog(this, "Leider falsch");
        }
    }//GEN-LAST:event_jButtonEinzelloesungActionPerformed

    private void jButtonDruckenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDruckenActionPerformed
    jFrameRaetsel.setVisible(true);
    jFrameRaetsel.setBackground(Color.WHITE);
    jPanelDrucken.removeAll();      //behebt anscheined die Fehler in der Druckvorschau beim Verändern des KWR

    
    int hoehe =  Oberflaeche.this.getHeight();
    int breite = (int) (hoehe*1.4143);
    jFrameRaetsel.setSize(breite, hoehe);
    jFrameRaetsel.setLayout(null);
    jPanelDrucken.setLayout(null);
    jLabel3.setBounds((int) ((breite-breite*0.4)/2),(int) (hoehe*0.005),(int) ((breite*0.4)),(int) ((hoehe*0.05)));
    jPanelDrucken.setBounds((int) ((breite-hoehe*0.93)/2),(int) ((hoehe)*0.06),(int) ((hoehe*0.93)),(int) ((hoehe*0.93)));
    
    
    
    int kastengroesse = 40;                // Fuer die optimierte Gittergroesse                                     
    while(raetsel.gitter.length*kastengroesse >  0.89 * jPanelDrucken.getWidth()|| raetsel.gitter.length*kastengroesse > 0.89* jPanelDrucken.getHeight() ){
        kastengroesse--;
    }
    JTextField kastendrucken[][] = new JTextField [raetsel.gitter.length][raetsel.gitter.length];
    
    for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {
                kastendrucken[i][m] = new JTextField();
                kastendrucken[i][m].setBounds(((jPanelDrucken.getWidth()-kastengroesse*raetsel.gitter.length)/2)+ m * kastengroesse, ((jPanelDrucken.getHeight()-kastengroesse*raetsel.gitter.length)/16)+ i * kastengroesse, kastengroesse-1, kastengroesse-1); //hier
                kastendrucken[i][m].setHorizontalAlignment(JTextField.CENTER);          // Buchstaben lassen sich mittig im Textfeld schreiben.
                kastendrucken[i][m].setEditable(false);
                if (raetsel.gitter[i][m] == ' ') {
                    kastendrucken[i][m].setVisible(false);
                    jPanelDrucken.add(kastendrucken[i][m]);
                } 
                else {
                    kastendrucken[i][m].setVisible(true);
                    jPanelDrucken.add(kastendrucken[i][m]);
                    kastendrucken[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black));  //jedes sichtbare Kaestchen erhaelt eine einfache Umrandung an allen Seiten
                    kastendrucken[i][m].setBackground(kasten[i][m].getBackground());
                    kastendrucken[i][m].setForeground(kasten[i][m].getForeground());
                }
            }
        }
    
            for (int x = 0; x < raetsel.horizontal.size(); x++) {
                kastendrucken[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setText(Integer.toString(x));
                kastendrucken[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setEditable(false);
                kastendrucken[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setBackground(Color.black);
                kastendrucken[raetsel.positionen[raetsel.horizontal.get(x)][0]][raetsel.positionen[raetsel.horizontal.get(x)][1]].setForeground(Color.white);
            }

            for (int x = 0; x < raetsel.vertikal.size(); x++) {
                if (raetsel.vertikal.get(x) != -1) {
                    kastendrucken[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setText(Integer.toString(x));
                    kastendrucken[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setEditable(false);
                    kastendrucken[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setBackground(Color.black);
                    kastendrucken[raetsel.positionen[raetsel.vertikal.get(x)][0]][raetsel.positionen[raetsel.vertikal.get(x)][1]].setForeground(Color.white);
                }
            }
    
    int[][] TrennzeichenPositionen = new int[raetsel.gitter.length][raetsel.gitter.length]; //Matrix fuer TrennzeichenPositionen

        for (int i = 0; i < raetsel.antwort.length; i++) {
            if (raetsel.positionen[i][2] == 0 && raetsel.positionen[i][0] + raetsel.antwort[i].length() < raetsel.gitter.length
                    && raetsel.gitter[raetsel.positionen[i][0] + raetsel.antwort[i].length()][raetsel.positionen[i][1]] != ' '
                    && kastendrucken[raetsel.positionen[i][0] + raetsel.antwort[i].length()][raetsel.positionen[i][1]].getText().equals("")) {
                TrennzeichenPositionen[raetsel.positionen[i][0] + raetsel.antwort[i].length() - 1][raetsel.positionen[i][1]] = TrennzeichenPositionen[raetsel.positionen[i][0]
                        + raetsel.antwort[i].length() - 1][raetsel.positionen[i][1]] + 1;
            }
            if (raetsel.positionen[i][2] == 1 && raetsel.positionen[i][1] + raetsel.antwort[i].length() < raetsel.gitter.length
                    && raetsel.gitter[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length()] != ' '
                    && kastendrucken[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length()].getText().equals("")) {
                TrennzeichenPositionen[raetsel.positionen[i][0]][raetsel.positionen[i][1] + raetsel.antwort[i].length() - 1] = TrennzeichenPositionen[raetsel.positionen[i][0]][raetsel.positionen[i][1]
                        + raetsel.antwort[i].length() - 1] + 2;
            }
        }

        for (int i = 0; i < raetsel.gitter.length; i++) {
            for (int m = 0; m < raetsel.gitter.length; m++) {
                if (TrennzeichenPositionen[i][m] == 1) {
                    kastendrucken[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 3, 1, Color.black));
                }
                if (TrennzeichenPositionen[i][m] == 2) {
                    kastendrucken[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 1, 3, Color.black));
                }
                if (TrennzeichenPositionen[i][m] == 3) {
                    kastendrucken[i][m].setBorder(BorderFactory.createMatteBorder(1, 1, 3, 3, Color.black));
                }
                if (raetsel.gitter[i][m] != ' '){
                                kastendrucken[i][m].setText(kasten[i][m].getText());
                     }
            }
        }
        
        jFrameRaetsel.getContentPane().setBackground(Color.WHITE);
        jPanelDrucken.setBackground(Color.WHITE);
        
        PrinterJob pj = PrinterJob.getPrinterJob();             //Erstellen eines Objektes "PrinterJob"
        pj.setJobName("Kreuzworträtsel");       

    pj.setPrintable (new Printable() {    
    public int print(Graphics pg, PageFormat pf, int pageNum){              //Druckmethode
        if (pageNum > 0){
          return Printable.NO_SUCH_PAGE;
        }
        pf.setOrientation(PageFormat.LANDSCAPE);                //Querformat
        Graphics2D g2 = (Graphics2D) pg;                        //erzeugt eine Grafik aus dem DruckJob
        g2.translate(pf.getImageableX(), pf.getImageableY());

        double scale=(pf.getImageableWidth()/jFrameRaetsel.getWidth());     
        g2.scale(scale, scale);                                             //Skaliert die Grafik richtig
        jFrameRaetsel.paint(g2);
        return Printable.PAGE_EXISTS;
    }

            
public int print2(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
        throw new UnsupportedOperationException("Not supported yet.");
        }
  });
  if (pj.printDialog() == false)
  return;

      try {
        pj.print();
            } catch (PrinterException ex) {
        // handle exception
  } 
  // "Bounds"-Optimierung der Objekte auf DIN A4
  jFrameFragen.setVisible(true);
  jFrameFragen.setSize(breite, hoehe);
  JPanel jPanelSenkrecht = new JPanel();
  JPanel jPanelWaagerecht = new JPanel();
  jPanelSenkrecht.setVisible(true);
  jPanelWaagerecht.setVisible(true);
  jFrameFragen.add(jPanelSenkrecht);
  jFrameFragen.add(jPanelWaagerecht);
  jLabelWaagerecht.setBounds((int) ((breite-0.4)/4), (int) (hoehe*0.1), (int) ((breite*0.4)), (int) (hoehe*0.05));
  jLabelSenkrecht.setBounds((int) ((breite-0.4)*3/4), (int) (hoehe*0.1), (int) ((breite*0.4)), (int) (hoehe*0.05));
  jPanelWaagerecht.setBounds((int)(0), (int) (hoehe*0.1), (int) (breite/2-0.01), (int) (hoehe*0.8));
  jPanelSenkrecht.setBounds((int)(breite/2), (int) (hoehe*0.1), (int) (breite/2), (int) (hoehe*0.8));
  jPanelSenkrecht.setLayout(null);
  jPanelWaagerecht.setLayout(null);
  //JLabel[] senkrecht und waagerecht zeigt die Fragen fuer die senkrechten und waagerechten Antworten im Gitter in der Druckfunktion an
  JLabel senkrecht[] = new JLabel[raetsel.vertikal.size()];
  JLabel waagerecht[] = new JLabel[raetsel.horizontal.size()];
  int start = 0;
  for (int i=0; i < raetsel.vertikal.size();i++){
      if (raetsel.vertikal.get(i) != -1) {
          start = i;
          break;
      }
  }
  // wie bei Raetselerstellung

  int labelgroesse=30;
  if(raetsel.vertikal.size()-start>=raetsel.horizontal.size()){
    while(labelgroesse*(raetsel.vertikal.size()+1-start)>jPanelSenkrecht.getHeight()||labelgroesse<=10){
        labelgroesse--;
    }
  }
  else{
    while(labelgroesse*raetsel.horizontal.size()+1>jPanelSenkrecht.getHeight()||labelgroesse<=10){
        labelgroesse--;
    }
  }
  for (int i = 0; i < raetsel.horizontal.size(); i++) {
      
      waagerecht[i] = new JLabel();
      waagerecht[i].setVisible(true);
      jPanelWaagerecht.add(waagerecht[i]);
      waagerecht[i].setBounds(15, labelgroesse*i, jPanelWaagerecht.getWidth(), labelgroesse);
      waagerecht[i].setText(i + " " + raetsel.fragen[raetsel.horizontal.get(i)]);
        
  }
  
  for (int i = start; i < raetsel.vertikal.size(); i++) {
      senkrecht[i] = new JLabel();
      senkrecht[i].setVisible(true);
      jPanelSenkrecht.add(senkrecht[i]);
      senkrecht[i].setBounds(5, labelgroesse*(i-start), jPanelSenkrecht.getWidth(), labelgroesse);
      if (raetsel.vertikal.get(i) != -1) senkrecht[i].setText(i + " " + raetsel.fragen[raetsel.vertikal.get(i)]);
            
  }
jFrameFragen.getContentPane().setBackground(Color.white);
jPanelSenkrecht.setBackground(Color.white);
jPanelWaagerecht.setBackground(Color.white);
  
  
  PrinterJob pj2 = PrinterJob.getPrinterJob();
        pj2.setJobName("Fragen");       //jPanel3 beinhaltet beide Listen und das "Mittel-Panel"

    pj.setPrintable (new Printable() {    //Druckfunktion
    public int print(Graphics pg, PageFormat pf, int pageNum){
      if (pageNum > 0){
      return Printable.NO_SUCH_PAGE;
      }
      pf.setOrientation(PageFormat.LANDSCAPE);      // Querformat
      Graphics2D g2 = (Graphics2D) pg;
      g2.translate(pf.getImageableX(), pf.getImageableY());
      double scale=(pf.getImageableWidth()/jFrameFragen.getWidth()); 
      g2.scale(scale, scale);
      jFrameFragen.paint(g2);
      return Printable.PAGE_EXISTS;
    }

            
            public int print2(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                throw new UnsupportedOperationException("Not supported yet.");
            }
  });
  if (pj.printDialog() == false)
  return;

    try {
        pj.print();
  } catch (PrinterException ex) {
        // handle exception
    }//GEN-LAST:event_jButtonDruckenActionPerformed
    jFrameFragen.setVisible(false);
    jFrameRaetsel.setVisible(false);

    }  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Oberflaeche.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Oberflaeche.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Oberflaeche.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Oberflaeche.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Oberflaeche().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDrucken;
    private javax.swing.JButton jButtonDurchsuchen;
    private javax.swing.JButton jButtonEinzelloesung;
    private javax.swing.JButton jButtonErstellen;
    private javax.swing.JButton jButtonHilfe;
    private javax.swing.JButton jButtonKomplettloesung;
    private javax.swing.JButton jButtonPopUpErstellen;
    private javax.swing.JDialog jDialogPopUp;
    private javax.swing.JFrame jFrameFragen;
    private javax.swing.JFrame jFrameRaetsel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelSenkrecht;
    private javax.swing.JLabel jLabelWaagerecht;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelDrucken;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldDurchsuchen;
    private javax.swing.JMenuItem jumpTo;
    private javax.swing.JPopupMenu listenDropdown;
    private javax.swing.JMenuItem loesungAnzeigen;
    // End of variables declaration//GEN-END:variables
}
